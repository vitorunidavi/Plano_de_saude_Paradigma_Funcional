🩺 Análise Funcional de Custos de Plano de Saúde

Aplicação web desenvolvida para a disciplina Linguagem de Programação e Paradigmas — Prof. Esp. Ademar Perfoll Junior.

Este projeto aplica o Paradigma de Programação Funcional (PF) em JavaScript, simulando e calculando os custos de um plano de saúde.
Toda a lógica é construída sobre funções puras e imutabilidade, garantindo previsibilidade e consistência nos resultados.

👥 Desenvolvedores

Vitor Hugo Tavares

Gustavo Borgonha

Repositório oficial:
https://github.com/vitorunidavi/Plano_de_saude_Paradigma_Funcional

🎯 Objetivo do Projeto

Implementar uma aplicação prática e acessível utilizando JavaScript Funcional, demonstrando:

🧩 Funções Puras: Lógica sem efeitos colaterais.

🔒 Imutabilidade: Criação de novos estados de dados sem alterar os originais.

⚙️ Funções de Ordem Superior (HOCs): Uso de map, filter e reduce para o processamento declarativo de listas.

✅ Validação Pura: Garantia de consistência nos dados antes do cálculo.

⚙️ Tecnologias Utilizadas

JavaScript (ES Modules) — Linguagem principal com modularização (regras.js e index.js)

HTML / CSS — Interface de entrada e exibição de dados

Node.js / Live Server — Execução local do projeto (necessário para import/export)

🧪 Tema Implementado — Plano de Saúde

(Faixa Etária, Coparticipação e Franquias)

O sistema simula as regras de precificação e custo de procedimentos de um plano de saúde.

Tipo	Descrição
Entrada (Input)	Lista de Beneficiários (Nome, Idade) e Procedimentos utilizados (Nome, Valor).
Regras (Lógica)	1️⃣ Mensalidade baseada na Faixa Etária.
2️⃣ Cálculo da Coparticipação (%).
3️⃣ Limite Máximo de Coparticipação Mensal (Franquia).
Saída (Output)	Custo Total por Beneficiário (Mensalidade + Coparticipação Final).
Invariantes	Coparticipação nunca excede o valor do procedimento e respeita o limite mensal.
🧠 Aplicação do Paradigma de Programação Funcional

Toda a lógica do projeto está contida em funções puras definidas em regras.js.
Essas funções processam os dados de entrada em um pipeline funcional, garantindo imutabilidade e ausência de efeitos colaterais.

🔹 1. Funções Puras e Imutabilidade

Funções como calcularMensalidade, calcularCustoProcedimento e processarBeneficiario são puras.

Sempre retornam o mesmo resultado para a mesma entrada.

Criam novos objetos em cada etapa (uso do operador spread ...).

🔹 2. Fluxo de Processamento com HOCs
HOC	Função Aplicada	Finalidade
filter()	validarBeneficiario	Remove beneficiários com dados inválidos.
map()	processarBeneficiario	Gera o objeto de saída com custos calculados.
reduce()	Soma dos valores	Agrega custos de todos os procedimentos.
💡 Exemplo de Processamento

Entrada:

Beneficiário	Idade	Faixa	Procedimento	Valor (R$)	% Copart.
Alice	21	19–23	Consulta Clínica	80,00	30%

Regras Aplicadas:
1️⃣ Mensalidade: R$ 250,00
2️⃣ Coparticipação Bruta: R$ 80,00 × 30% = R$ 24,00
3️⃣ Limite Mensal: R$ 300,00 → válido

Saída Final:

Mensalidade: R$ 250,00

Coparticipação: R$ 24,00

Total Final: R$ 274,00

🚀 Guia de Instalação e Execução

O projeto é executado inteiramente no navegador, aproveitando o sistema de módulos JavaScript (ES Modules).

🔧 1. Clonar o Repositório

Obtenha uma cópia do código-fonte utilizando o comando git clone no seu terminal:

git clone https://github.com/vitorunidavi/Plano_de_saude_Paradigma_Funcional.git
cd Plano_de_saude_Paradigma_Funcional

🧩 2. Instalação de Ferramentas (VS Code)

Para garantir que o import/export funcione corretamente, é necessário rodar o projeto em um servidor local.

Instale a extensão Live Server no VS Code (Autor: Ritwick Dey).

📁 3. Estrutura de Arquivos

A pasta do projeto contém a estrutura modular necessária para a execução:

plano-de-saude-funcional/
├── index.html     (Interface e CSS)
├── index.js       (Fluxo de processamento e UI)
└── regras.js      (Funções Puras e Tabelas de Dados)

🖥️ 4. Execução (No Navegador)

Abra a pasta do projeto no VS Code.

Clique com o botão direito no arquivo index.html.

Selecione “Open with Live Server”.

A aplicação será aberta no seu navegador, pronta para testar o fluxo funcional.

🖋️ Créditos

Desenvolvido por:
👨‍💻 Gustavo Borgonha
👨‍💻 Vitor Hugo Tavares

📚 Curso: Sistemas de Informação
🏫 Universidade: [Nome da Instituição, se desejar incluir]
👨‍🏫 Disciplina: Linguagem de Programação e Paradigmas
🧑‍🏫 Professor: Esp. Ademar Perfoll Junior
